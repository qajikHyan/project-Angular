/// <reference path="../../jqwidgets.d.ts" />
import * as tslib_1 from "tslib";
import { Component, Input, ElementRef } from '@angular/core';
let jqxHeatMapComponent = class jqxHeatMapComponent {
    constructor(containerElement) {
        this.autoCreate = true;
        this.properties = ['xAxis', 'yAxis', 'paletteSettings', 'legendSettings', 'source', 'title', 'width', 'tooltipRender'];
        this.elementRef = containerElement;
    }
    ngOnInit() {
        if (this.autoCreate) {
            this.createComponent();
        }
    }
    ;
    ngOnChanges(changes) {
        if (this.host) {
            for (let i = 0; i < this.properties.length; i++) {
                let attrName = 'attr' + this.properties[i].substring(0, 1).toUpperCase() + this.properties[i].substring(1);
                let areEqual = false;
                if (this[attrName] !== undefined) {
                    if (typeof this[attrName] === 'object') {
                        if (this[attrName] instanceof Array) {
                            areEqual = this.arraysEqual(this[attrName], this.host.jqxHeatMap(this.properties[i]));
                        }
                        if (areEqual) {
                            return false;
                        }
                        this.host.jqxHeatMap(this.properties[i], this[attrName]);
                        continue;
                    }
                    if (this[attrName] !== this.host.jqxHeatMap(this.properties[i])) {
                        this.host.jqxHeatMap(this.properties[i], this[attrName]);
                    }
                }
            }
        }
    }
    arraysEqual(attrValue, hostValue) {
        if ((attrValue && !hostValue) || (!attrValue && hostValue)) {
            return false;
        }
        if (attrValue.length != hostValue.length) {
            return false;
        }
        for (let i = 0; i < attrValue.length; i++) {
            if (attrValue[i] !== hostValue[i]) {
                return false;
            }
        }
        return true;
    }
    manageAttributes() {
        let options = {};
        for (let i = 0; i < this.properties.length; i++) {
            let attrName = 'attr' + this.properties[i].substring(0, 1).toUpperCase() + this.properties[i].substring(1);
            if (this[attrName] !== undefined) {
                options[this.properties[i]] = this[attrName];
            }
        }
        return options;
    }
    moveClasses(parentEl, childEl) {
        let classes = parentEl.classList;
        if (classes.length > 0) {
            childEl.classList.add(...classes);
        }
        parentEl.className = '';
    }
    moveStyles(parentEl, childEl) {
        let style = parentEl.style.cssText;
        childEl.style.cssText = style;
        parentEl.style.cssText = '';
    }
    createComponent(options) {
        if (this.host) {
            return;
        }
        if (options) {
            JQXLite.extend(options, this.manageAttributes());
        }
        else {
            options = this.manageAttributes();
        }
        this.host = JQXLite(this.elementRef.nativeElement.firstChild);
        this.moveClasses(this.elementRef.nativeElement, this.host[0]);
        this.moveStyles(this.elementRef.nativeElement, this.host[0]);
        this.__wireEvents__();
        this.widgetObject = jqwidgets.createInstance(this.host, 'jqxHeatMap', options);
    }
    createWidget(options) {
        this.createComponent(options);
    }
    __updateRect__() {
        if (this.host)
            this.host.css({ width: this.attrWidth, height: this.attrHeight });
    }
    setOptions(options) {
        this.host.jqxHeatMap('setOptions', options);
    }
    // jqxHeatMapComponent properties
    xAxis(arg) {
        if (arg !== undefined) {
            this.host.jqxHeatMap('xAxis', arg);
        }
        else {
            return this.host.jqxHeatMap('xAxis');
        }
    }
    yAxis(arg) {
        if (arg !== undefined) {
            this.host.jqxHeatMap('yAxis', arg);
        }
        else {
            return this.host.jqxHeatMap('yAxis');
        }
    }
    paletteSettings(arg) {
        if (arg !== undefined) {
            this.host.jqxHeatMap('paletteSettings', arg);
        }
        else {
            return this.host.jqxHeatMap('paletteSettings');
        }
    }
    legendSettings(arg) {
        if (arg !== undefined) {
            this.host.jqxHeatMap('legendSettings', arg);
        }
        else {
            return this.host.jqxHeatMap('legendSettings');
        }
    }
    source(arg) {
        if (arg !== undefined) {
            this.host.jqxHeatMap('source', arg);
        }
        else {
            return this.host.jqxHeatMap('source');
        }
    }
    title(arg) {
        if (arg !== undefined) {
            this.host.jqxHeatMap('title', arg);
        }
        else {
            return this.host.jqxHeatMap('title');
        }
    }
    width(arg) {
        if (arg !== undefined) {
            this.host.jqxHeatMap('width', arg);
        }
        else {
            return this.host.jqxHeatMap('width');
        }
    }
    tooltipRender(arg) {
        if (arg !== undefined) {
            this.host.jqxHeatMap('tooltipRender', arg);
        }
        else {
            return this.host.jqxHeatMap('tooltipRender');
        }
    }
    // jqxHeatMapComponent functions
    destroy() {
        this.host.jqxHeatMap('destroy');
    }
    setLegendPosition(position) {
        this.host.jqxHeatMap('setLegendPosition', position);
    }
    setOpposedXAxisPosition(opposedPosition) {
        this.host.jqxHeatMap('setOpposedXAxisPosition', opposedPosition);
    }
    setOpposedYAxisPosition(opposedPosition) {
        this.host.jqxHeatMap('setOpposedYAxisPosition', opposedPosition);
    }
    reverseXAxisPosition(isInversed) {
        this.host.jqxHeatMap('reverseXAxisPosition', isInversed);
    }
    reverseYAxisPosition(isInversed) {
        this.host.jqxHeatMap('reverseYAxisPosition', isInversed);
    }
    setPaletteType(type) {
        this.host.jqxHeatMap('setPaletteType', type);
    }
    // jqxHeatMapComponent events
    __wireEvents__() {
    }
}; //jqxHeatMapComponent
tslib_1.__decorate([
    Input('xAxis'),
    tslib_1.__metadata("design:type", Object)
], jqxHeatMapComponent.prototype, "attrXAxis", void 0);
tslib_1.__decorate([
    Input('yAxis'),
    tslib_1.__metadata("design:type", Object)
], jqxHeatMapComponent.prototype, "attrYAxis", void 0);
tslib_1.__decorate([
    Input('paletteSettings'),
    tslib_1.__metadata("design:type", Object)
], jqxHeatMapComponent.prototype, "attrPaletteSettings", void 0);
tslib_1.__decorate([
    Input('legendSettings'),
    tslib_1.__metadata("design:type", Object)
], jqxHeatMapComponent.prototype, "attrLegendSettings", void 0);
tslib_1.__decorate([
    Input('source'),
    tslib_1.__metadata("design:type", Array)
], jqxHeatMapComponent.prototype, "attrSource", void 0);
tslib_1.__decorate([
    Input('title'),
    tslib_1.__metadata("design:type", String)
], jqxHeatMapComponent.prototype, "attrTitle", void 0);
tslib_1.__decorate([
    Input('tooltipRender'),
    tslib_1.__metadata("design:type", Function)
], jqxHeatMapComponent.prototype, "attrTooltipRender", void 0);
tslib_1.__decorate([
    Input('width'),
    tslib_1.__metadata("design:type", Object)
], jqxHeatMapComponent.prototype, "attrWidth", void 0);
tslib_1.__decorate([
    Input('height'),
    tslib_1.__metadata("design:type", Object)
], jqxHeatMapComponent.prototype, "attrHeight", void 0);
tslib_1.__decorate([
    Input('auto-create'),
    tslib_1.__metadata("design:type", Boolean)
], jqxHeatMapComponent.prototype, "autoCreate", void 0);
jqxHeatMapComponent = tslib_1.__decorate([
    Component({
        selector: 'jqxHeatMap',
        template: '<div><ng-content></ng-content></div>'
    }),
    tslib_1.__metadata("design:paramtypes", [ElementRef])
], jqxHeatMapComponent);
export { jqxHeatMapComponent };
//# sourceMappingURL=data:application/json;base64,